@import "../node_modules/bootstrap/scss/functions";

$primary :#232325;
$light : #eff1f4;
$spacer : 1rem;





@import "../node_modules/bootstrap/scss/variables";

$spacers: (
  0: 0,
  1: $spacer * .25,
  2: $spacer * .5,
  3: $spacer,
  4: $spacer * 1.5,
  5: $spacer * 3,
  6:$spacer * 6,
  7:$spacer * 7,
  8:$spacer * 8,
  9: $spacer * 2.5,



);


$position-values: (
  0: 0%,
  15:-7%,
5: -4%,
3:-2%,
7:3%,
2:-10%,
50: 50%,
100: 100%,
a:3%,
b:1%
);







@import "../node_modules/bootstrap/scss/maps";

@import "../node_modules/bootstrap/scss/mixins";

// @import "../node_modules/bootstrap/scss/root";

@import "../node_modules/bootstrap/scss/utilities";
@import "../node_modules/bootstrap/scss/reboot";
@import "../node_modules/bootstrap/scss/type";
@import "../node_modules/bootstrap/scss/images";
@import "../node_modules/bootstrap/scss/containers";
@import "../node_modules/bootstrap/scss/grid";
@import "../node_modules/bootstrap/scss/helpers";


$utilities: map-merge(
  $utilities,
  (
    "width": map-merge(
      map-get($utilities, "width"),
      (
        values: map-merge(
          map-get(map-get($utilities, "width"), "values"),
          (20: 23%),
        ),
      ),
    ),
  ),

);

$utilities: map-merge(
  $utilities,
  (
    "width": map-merge(
      map-get($utilities, "width"),
      (
        values: map-merge(
          map-get(map-get($utilities, "width"), "values"),
          (90: 93%),
        ),
      ),
    ),
  ),

);

$utilities: map-merge(
  $utilities,
  (
    "height": map-merge(
      map-get($utilities, "height"),
      (
        values: map-merge(
          map-get(map-get($utilities, "height"), "values"),
          (95: 96%),
        ),
      ),
    ),
  )
);

$utilities: map-merge(
  $utilities,
  (
    "height": map-merge(
      map-get($utilities, "height"),
      (
        values: map-merge(
          map-get(map-get($utilities, "height"), "values"),
          (20: 20%),
        ),
      ),
    ),
  )
);


$utilities: map-merge(
  $utilities,
  (
    "height": map-merge(
      map-get($utilities, "height"),
      (
        values: map-merge(
          map-get(map-get($utilities, "height"), "values"),
          (9: 9%),
        ),
      ),
    ),
  )
);

$utilities: map-merge(
  $utilities,
  (
    "height": map-merge(
      map-get($utilities, "height"),
      (
        values: map-merge(
          map-get(map-get($utilities, "height"), "values"),
          (5: 5%),
        ),
      ),
    ),
  )
);


$utilities: map-merge(
  $utilities,
  (
    "height": map-merge(
      map-get($utilities, "height"),
      (
        values: map-merge(
          map-get(map-get($utilities, "height"), "values"),
          (15: 15%),
        ),
      ),
    ),
  )
);




$utilities: map-merge(
  $utilities,
  (
    "height": map-merge(
      map-get($utilities, "height"),
      (
        values: map-merge(
          map-get(map-get($utilities, "height"), "values"),
          (2: 8%),
        ),
      ),
    ),
  )
);



$utilities: map-merge(
  $utilities,
  (
    "height": map-merge(
      map-get($utilities, "height"),
      (
        values: map-merge(
          map-get(map-get($utilities, "height"), "values"),
          (17: 16%),
        ),
      ),
    ),
  )
);



$utilities: map-merge(
  $utilities,
  (
    "height": map-merge(
      map-get($utilities, "height"),
      (
        values: map-merge(
          map-get(map-get($utilities, "height"), "values"),
          (65: 65%),
        ),
      ),
    ),
  )
);



$utilities: map-merge(
  $utilities,
  (
    "height": map-merge(
      map-get($utilities, "height"),
      (
        values: map-merge(
          map-get(map-get($utilities, "height"), "values"),
          (70: 70%),
        ),
      ),
    ),
  )
);


$utilities: map-merge(
  $utilities,
  (
    "height": map-merge(
      map-get($utilities, "height"),
      (
        values: map-merge(
          map-get(map-get($utilities, "height"), "values"),
          (40: 40%),
        ),
      ),
    ),
  )
);


$utilities: map-merge(
  $utilities,
  (
    "height": map-merge(
      map-get($utilities, "height"),
      (
        values: map-merge(
          map-get(map-get($utilities, "height"), "values"),
          (80: 80%),
        ),
      ),
    ),
  )
);

$utilities: map-merge(
  $utilities,
  (
    "cursor": (
      property: cursor,
      values: auto default pointer wait text move help not-allowed
    ),
  )
);


.p-button:enabled{
  background-color: #de2768!important;
  border: 0px solid black;
  box-shadow: 0px 0px red;
}

.p-button:hover{
  background-color: #bd2158!important;
  border: 0px solid black;
  box-shadow: 0px 0px red;
};

.p-inputtext:enabled:hover{

  border: 0px solid black;
  box-shadow: 0px 0px red;

};



.p-inputtext:enabled:focus{

  border: 0px solid black;
  box-shadow: 0px 0px red;

};

.p-inputtext:enabled{

  border: 0px solid black;
  box-shadow: 0px 0px red;

};


.bg:hover{
  background-image: linear-gradient(195deg, #42424a 0%, #191919 100%);
};


  .tog{
      background-image: linear-gradient(195deg, #EC407A 0%, #D81B60 100%);
  };


  .tog:hover{
    background-image: linear-gradient(195deg, #EC407A 0%, #7d002e 100%);
  };

.dropdown-item:active{
    background-color: #de2768!important;
  };

.selected{
  background-color: #f67da8!important;
};

.dropdown-menu { max-height: 11.25rem; overflow-y: auto; min-width: 100% !important; background-attachment: local, local, scroll, scroll; };
.dropdown-item { white-space: normal; };



$color-mode-type: data;

@include color-mode(dark) {

  label{
    color: var(--bs-white);

  };

  table {
    background-color: var(--bs-secondary-bg-subtle);

  };

  td{
    color: var(--bs-white);
  };

  tr{
    color: var(--bs-white);
  };

  li{
    color: var(--bs-white);
  };

  li.activeli{
    color: var(--bs-pink);
  }


  .login{
    background-color:var(--bs-secondary-bg-subtle);

  };


  $dropdown-color: var(--bs-white);

  .dropdown-item{ color: var(--bs-white)};

  .card{ color:  var(--bs-white); };
  .p-dialog .p-dialog-header{
    background-color: var(--bs-secondary-bg-subtle);
    color: var(--bs-white);
  };

  .p-dialog .p-dialog-content{
    background-color: var(--bs-secondary-bg-subtle);
    color: var(--bs-white);

  };

  .p-dialog .p-dialog-footer{
    background-color: var(--bs-secondary-bg-subtle);
    color: var(--bs-white);

  };


  .breadcrumb-item {
    // The separator between breadcrumbs (by default, a forward-slash: "/")
    + .breadcrumb-item {
      &::before {
        color: var(--#{$prefix}white);
      }
    }
  };


};





.trorder{
  overflow-x: visible!important;
};

.dropdown-toggle:empty::after{
  margin-left: 0.255em!important;
};




@import "../node_modules/bootstrap/scss/utilities/api";





